{"version":3,"sources":["components/forms/newEmployee/newEmployeeForm.js","components/UI/employeesTable/employeesTable.js","App.js","serviceWorker.js","index.js"],"names":["newEmployeeForm","props","handleChange","event","setState","target","name","value","state","employeeName","employeePhone","employees","bind","handleSubmit","preventDefault","console","log","this","newEmployee","push","parentcallback","className","onSubmit","htmlFor","type","id","onChange","placeholder","required","React","Component","EmployeesTable","emp","renderTableData","length","map","employee","index","key","App","getNewEmployee","childData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAoEeA,G,kBA/DX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAaVC,aAAe,SAACC,GAEZ,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAdlD,EAAKC,MAAQ,CACTC,aAAc,GACdC,cAAc,GACdC,UAAU,IAId,EAAKT,aAAe,EAAKA,aAAaU,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVL,E,0EAmBNT,GACTA,EAAMW,iBACNC,QAAQC,IAAI,aACZD,QAAQC,IAAIC,KAAKT,MAAMC,cAEvB,IAAMS,EAAc,CAChBT,aAAcQ,KAAKT,MAAMC,aACzBC,cAAeO,KAAKT,MAAME,eAE9BK,QAAQC,IAAIE,GAEZD,KAAKT,MAAMG,UAAUQ,KAAKD,GAC1BD,KAAKhB,MAAMmB,eAAeH,KAAKT,MAAMG,a,+BAKrC,OAAQ,yBAAKU,UAAW,aACZ,8CACA,0BAAMC,SAAUL,KAAKJ,cACjB,2BAAOU,QAAQ,WAAf,OAEI,2BAAOC,KAAK,OAAOC,GAAG,UAAUnB,KAAK,eAAeC,MAAOU,KAAKT,MAAMC,aAAciB,SAAUT,KAAKf,aAAcyB,YAAY,UAGjI,2BAAOJ,QAAQ,YAAf,eAEI,2BAAOC,KAAK,MAAMC,GAAG,WAAWnB,KAAK,gBAC9BqB,YAAY,SACZpB,MAAOU,KAAKT,MAAME,cAClBgB,SAAUT,KAAKf,aACf0B,UAAQ,KAEnB,2BAAOJ,KAAK,SAASjB,MAAM,YAEnC,6BACI,8CACqBU,KAAKT,MAAMC,aADhC,6BAE6BQ,KAAKT,MAAME,qB,GA3D9BmB,IAAMC,YCmCrBC,G,MAnCO,SAAC9B,GAEnBc,QAAQC,IAAI,SACZD,QAAQC,IAAIf,EAAM+B,KAElB,IAAIC,EAAkB,KAmBtB,OAfIA,EAFDhC,EAAM+B,IAAIE,OAAQ,EAECjC,EAAM+B,IAAIG,KAAI,SAACC,EAAUC,GAAW,IAClC5B,EAAgC2B,EAAhC3B,aAAcC,EAAkB0B,EAAlB1B,cACtB,OACA,wBAAI4B,IAAKD,GACT,4BAAK5B,GACL,4BAAKC,OAOD,6CAGZ,yBAAKW,UAAW,aACpB,wBAAII,GAAG,SAAP,mBAEA,+BACI,+BACCQ,OCUEM,E,YAnCX,WAAYtC,GAAQ,IAAD,8BACf,4CAAMA,KAQVuC,eAAiB,SAACC,GACd,EAAKrC,SAAS,CAACO,UAAW8B,IAC1B1B,QAAQC,IAAI,oBACZD,QAAQC,IAAI,EAAKR,MAAMG,UAAUuB,SAVjC,EAAK1B,MAAQ,CACTG,UAAU,IAHC,E,sEAkBf,OAEI,yBAAKU,UAAU,OACX,4BAAQA,UAAU,cAAlB,iBAGA,yBAAKA,UAAU,aAEX,kBAAC,EAAD,CAAiBD,eAAgBH,KAAKuB,iBAEtC,kBAAC,EAAD,CAAgBR,IAAKf,KAAKT,MAAMG,kB,GA9BlCkB,IAAMC,WCOJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.87698e73.chunk.js","sourcesContent":["import React from 'react';\n\nimport  './newEmployeeForm.css'\nclass newEmployeeForm extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            employeeName: '',\n            employeePhone:'',\n            employees:[]\n        };\n\n        // bind state to handle change and handle submit otherwise form submission will be blank\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    // a generic change handler that assigns input name through event\n    handleChange = (event) => {\n\n        this.setState({ [event.target.name]: event.target.value});\n    };\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log('submitted');\n        console.log(this.state.employeeName);\n\n        const newEmployee = {\n            employeeName: this.state.employeeName,\n            employeePhone: this.state.employeePhone\n        };\n        console.log(newEmployee);\n\n        this.state.employees.push(newEmployee);\n        this.props.parentcallback(this.state.employees);\n    }\n\n    render(){\n\n        return  <div className={'container'}>\n                    <h2>Form Component</h2>\n                    <form onSubmit={this.handleSubmit}>\n                        <label htmlFor=\"empName\">\n                            Name\n                            <input type=\"text\" id=\"empName\" name=\"employeeName\" value={this.state.employeeName} onChange={this.handleChange} placeholder='name' />\n                        </label>\n\n                        <label htmlFor=\"empPhone\">\n                            Phone number\n                            <input type=\"tel\" id=\"empPhone\" name=\"employeePhone\"\n                                   placeholder='number'\n                                   value={this.state.employeePhone}\n                                   onChange={this.handleChange}\n                                   required/>\n                        </label>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                <div>\n                    <p>\n                        Current text is {this.state.employeeName};\n                        Current phone number is {this.state.employeePhone}\n                    </p>\n                </div>\n        </div>;\n    }\n}\nexport default newEmployeeForm;\n","import React from 'react';\nimport './employeesTable.css';\n\nconst EmployeesTable= (props) => {\n\n    console.log('Hello');\n    console.log(props.emp);\n\n    let renderTableData = null;\n\n    if(props.emp.length >0){\n\n        renderTableData = props.emp.map((employee, index) => {\n                    const { employeeName, employeePhone } = employee; //destructuring\n                    return (\n                    <tr key={index}>\n                    <td>{employeeName}</td>\n                    <td>{employeePhone}</td>\n                    </tr>\n                    )\n                });\n\n    }\n    else{\n        renderTableData=<p>Table is empty</p>\n    }\n\n    return  <div className={'container'}>\n        <h2 id='title'>Table Component</h2>\n\n        <table>\n            <tbody>\n            {renderTableData}\n            </tbody>\n        </table>\n        </div>\n};\n\nexport default EmployeesTable;\n","import React from 'react';\nimport './App.css';\nimport NewEmployeeForm from './components/forms/newEmployee/newEmployeeForm';\nimport EmployeesTable from \"./components/UI/employeesTable/employeesTable\";\n\nclass App extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            employees:[],\n        };\n\n    }\n\n    // A callback function to get new ReactCallback\n    getNewEmployee = (childData) => {\n        this.setState({employees: childData});\n        console.log(\"callback called?\");\n        console.log(this.state.employees.length);\n    };\n\n\n    render() {\n\n        return (\n\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    App Component\n                </header>\n                <div className=\"container\">\n\n                    <NewEmployeeForm parentcallback={this.getNewEmployee}/>\n\n                    <EmployeesTable emp={this.state.employees}/>\n                </div>\n            </div>\n        );\n      }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}